//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30128.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Definitif;
using Definitif.Data;
using Definitif.Data.Queries;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;


namespace Definitif.Test {
    
    public partial class TestModel : Model<Definitif.Test.Mappers.TestModel> {

        /// <summary>
        /// Gets TestModel instance from database by given Id.
        /// </summary>
        public static TestModel Get(Id id) {
            return TestModel.Mapper.Read(id);
        }

        public class TestModelTableScheme : ModelTableScheme<Definitif.Test.Mappers.TestModel> {
            public TestModelTableScheme() {
                if (!p_foreign.Id.ForeignKeys.ContainsKey(table["ForeignId"])) p_foreign.Id.ForeignKeys.Add(table["ForeignId"]);
            }

            private Column p_name = table["Name"];
            public Column Name { get { return p_name; } }
            private ForeignModelTableScheme p_foreign = new ForeignModel().C;
            public ForeignModelTableScheme Foreign { get { return p_foreign; } }
        }

        private static TestModelTableScheme tableScheme = new TestModelTableScheme();
        /// <summary>
        /// Gets TestModel model table scheme.
        /// </summary>
        public new TestModelTableScheme C {
            get {
                return tableScheme;
            }
        }

        public string Name {
            get { return p_name; }
            set { p_name = value; }
        }
        protected string p_name;

        protected Id ForeignId {
            get { return id_foreign; }
            set { id_foreign = value; }
        }
        protected Id id_foreign = Id.Empty;

        public ForeignModel Foreign {
            get {
                if (p_foreign == null && id_foreign != Id.Empty) {
                    p_foreign = ForeignModel.Get(id_foreign);
                }
                return p_foreign;
            }
            set {
                p_foreign = value;
                id_foreign = value.Id;
            }
        }
        protected ForeignModel p_foreign = null;

    }
}
namespace Definitif.Test.Mappers {
    
    public partial class TestModel : Mapper<Definitif.Test.TestModel> {

        public TestModel()
        {
            this.database = Core.Database;
            this.table = this.database["TestModels"];
        }

        public sealed override Definitif.Test.TestModel ReadObject(IDataReader reader)
        {
            Definitif.Test.TestModel result = new Definitif.Test.TestModel()
            {
                Name = (string)reader["Name"],
                ForeignId = (reader["ForeignId"] == DBNull.Value) ? Id.Empty : new Id(reader["ForeignId"]),
            };
            FillBase(result, reader);
            return result;
        }
        public sealed override Definitif.Test.TestModel ReadObject(IDataReader reader, string fieldPrefix)
        {
            Definitif.Test.TestModel result = new Definitif.Test.TestModel()
            {
                Name = (string)reader[fieldPrefix + "Name"],
                ForeignId = (reader[fieldPrefix + "ForeignId"] == DBNull.Value) ? Id.Empty : new Id(reader[fieldPrefix + "ForeignId"]),
            };
            FillBase(result, reader, fieldPrefix);
            return result;
        }

        protected sealed override List<DbCommand> InsertCommands(Definitif.Test.TestModel obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Insert<Definitif.Test.TestModel>()
                        .Values(m =>
                            m.C.Name == obj.Name &
                            m.C.Foreign.Id == (obj.ForeignId == Id.Empty) ? DBNull.Value : obj.Foreign))
            };
            this.InsertCommandsExtension(obj, list);
            return list;
        }
        partial void InsertCommandsExtension(Definitif.Test.TestModel obj, List<DbCommand> list);

        protected sealed override List<DbCommand> UpdateCommands(Definitif.Test.TestModel obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Update<Definitif.Test.TestModel>()
                        .Values(m =>
                            m.C.Version == obj.Version + 1 &
                            m.C.Name == obj.Name &
                            m.C.Foreign.Id == (obj.ForeignId == Id.Empty) ? DBNull.Value : obj.Foreign)
                        .Where(m =>
                            m.C.Id == obj.Id.Value &
                            m.C.Version == obj.Version))
            };
            this.UpdateCommandsExtension(obj, list);
            return list;
        }
        partial void UpdateCommandsExtension(Definitif.Test.TestModel obj, List<DbCommand> list);

        protected sealed override List<DbCommand> DeleteCommands(Definitif.Test.TestModel obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Delete<Definitif.Test.TestModel>()
                        .Where(m =>
                            m.C.Id == obj.Id.Value &
                            m.C.Version == obj.Version))
            };
            this.DeleteCommandsExtension(obj, list);
            return list;
        }
        partial void DeleteCommandsExtension(Definitif.Test.TestModel obj, List<DbCommand> list);

    }
}
