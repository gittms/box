//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30128.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Definitif;
using Definitif.Data;
using Definitif.Data.ObjectSql;
using Definitif.Data.ObjectSql.Query;
using System;
using System.Collections.Generic;
using System.Data;


namespace Definitif.Test {
    
    public partial class TestModel : Model<Definitif.Test.Mappers.TestModel> {

        /// <summary>
        /// Gets TestModel instance from database by given Id.
        /// </summary>
        public static TestModel Get(Id id) {
            return TestModel.Mapper.Read(id);
        }

        public string Name {
            get { return p_name; }
            set { p_name = value; }
        }
        protected string p_name;

        public string Count {
            get { return p_count; }
            set { p_count = value; }
        }
        protected string p_count;

    }
}
namespace Definitif.Test.Mappers {
    
    public partial class TestModel : Mapper<Definitif.Test.TestModel> {

        public TestModel()
        {
            this.database = Core.Database;
            this.table = this.database["TestModels"];
        }

        public sealed override Definitif.Test.TestModel ReadObject(IDataReader reader)
        {
            Definitif.Test.TestModel result = new Definitif.Test.TestModel()
            {
                Name = (string)reader["Name"],
                Count = (string)reader["Count"],
            };
            FillBase(result, reader);
            return result;
        }
        public sealed override Definitif.Test.TestModel ReadObject(IDataReader reader, string fieldPrefix)
        {
            Definitif.Test.TestModel result = new Definitif.Test.TestModel()
            {
                Name = (string)reader[fieldPrefix + "Name"],
                Count = (string)reader[fieldPrefix + "Count"],
            };
            FillBase(result, reader, fieldPrefix);
            return result;
        }

        protected sealed override List<IDbCommand> InsertCommands(Definitif.Test.TestModel obj) {
            List<IDbCommand> list = new List<IDbCommand> {
                this.database.GetCommand(
                    new Insert() {
                        VALUES = {
                            table["Name"] == obj.Name,
                            table["Count"] == obj.Count,
                        }
                    })
            };
            this.InsertCommandsExtension(obj, list);
            return list;
        }
        partial void InsertCommandsExtension(Definitif.Test.TestModel obj, List<IDbCommand> list);

        protected sealed override List<IDbCommand> UpdateCommands(Definitif.Test.TestModel obj) {
            List<IDbCommand> list = new List<IDbCommand> {
                this.database.GetCommand(
                    new Update() {
                        VALUES = {
                            table["Version"] == obj.Version + 1,
                            table["Name"] == obj.Name,
                            table["Count"] == obj.Count,
                        },
                        WHERE = {
                            table["Id"] == obj.Id.Value,
                            table["Version"] == obj.Version,
                        }
                    })
            };
            this.UpdateCommandsExtension(obj, list);
            return list;
        }
        partial void UpdateCommandsExtension(Definitif.Test.TestModel obj, List<IDbCommand> list);

        protected sealed override List<IDbCommand> DeleteCommands(Definitif.Test.TestModel obj) {
            List<IDbCommand> list = new List<IDbCommand> {
                this.database.GetCommand(
                    new Delete(table) {
                        WHERE = {
                            table["Id"] == obj.Id.Value, 
                            table["Version"] == obj.Version,
                        }
                    })
            };
            this.DeleteCommandsExtension(obj, list);
            return list;
        }
        partial void DeleteCommandsExtension(Definitif.Test.TestModel obj, List<IDbCommand> list);

    }
}
