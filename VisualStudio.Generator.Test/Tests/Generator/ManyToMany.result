//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30128.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Definitif;
using Definitif.Data;
using Definitif.Data.ObjectSql;
using Definitif.Data.ObjectSql.Query;
using System;
using System.Collections.Generic;
using System.Data;


namespace Definitif.Test {
    
    public partial class User : Model<Definitif.Test.Mappers.User> {

        /// <summary>
        /// Gets User instance from database by given Id.
        /// </summary>
        public User Get(Id id) {
            return User.Mapper.Get(id);
        }

        public string Name {
            get { return p_name; }
            set { p_name = value; }
        }
        protected string p_name;

    }
    public partial class Achievement : Model<Definitif.Test.Mappers.Achievement> {

        /// <summary>
        /// Gets Achievement instance from database by given Id.
        /// </summary>
        public Achievement Get(Id id) {
            return Achievement.Mapper.Get(id);
        }

        public string Name {
            get { return p_name; }
            set { p_name = value; }
        }
        protected string p_name;

    }
    public partial class UserAchievement : Model<Definitif.Test.Mappers.UserAchievement>, IManyToMany {

        /// <summary>
        /// Gets UserAchievement instance from database by given Id.
        /// </summary>
        public UserAchievement Get(Id id) {
            return UserAchievement.Mapper.Get(id);
        }

        protected Id UserId {
            get { return id_user; }
            set { id_user = value; }
        }
        protected Id id_user = Id.Empty;

        public User User {
            get {
                if (p_user == null && id_user != Id.Empty) {
                    p_user = User.Get(id_user);
                }
                return p_user;
            }
            set {
                p_user = value;
                id_user = value.Id;
            }
        }
        protected User p_user = null;

        protected Id AchievementId {
            get { return id_Achievement; }
            set { id_Achievement = value; }
        }
        protected Id id_Achievement = Id.Empty;

        public Achievement Achievement {
            get {
                if (p_Achievement == null && id_Achievement != Id.Empty) {
                    p_Achievement = Achievement.Get(id_Achievement);
                }
                return p_Achievement;
            }
            set {
                p_Achievement = value;
                id_Achievement = value.Id;
            }
        }
        protected Achievement p_Achievement = null;

        public DateTime Received {
            get { return p_received; }
            set { p_received = value; }
        }
        protected DateTime p_received;

    }
    public partial class User {

        /// <summary>
        /// Gets linked Achievement objects.
        /// </summary>
        public List<ManyToMany<UserAchievement, Achievement>> GetAchievements() {
            return ManyToMany<UserAchievement, Achievement>.Mapper.Get(this.id);
        }

    }
    public partial class Achievement {

        /// <summary>
        /// Gets linked User objects.
        /// </summary>
        public List<ManyToMany<UserAchievement, User>> GetUsers() {
            return ManyToMany<UserAchievement, User>.Mapper.Get(this.id);
        }

    }
}
namespace Definitif.Test.Mappers {
    
    public partial class User : Mapper<Definitif.Test.User> {

        public User()
        {
            this.database = Core.Database;
            this.table = this.database["Users"];
        }

        public sealed override Definitif.Test.User ReadObject(IDataReader reader)
        {
            Definitif.Test.User result = new Definitif.Test.User()
            {
                Name = (string)reader["Name"],
            };
            FillBase(result, reader);
            return result;
        }
        public sealed override Definitif.Test.User ReadObject(IDataReader reader, string fieldPrefix)
        {
            Definitif.Test.User result = new Definitif.Test.User()
            {
                Name = (string)reader[fieldPrefix + "Name"],
            };
            FillBase(result, reader, fieldPrefix);
            return result;
        }

        protected sealed override List<IDbCommand> InsertCommands(Definitif.Test.User obj) {
            List<IDbCommand> list = new List<IDbCommand> {
                this.database.GetCommand(
                    new Insert() {
                        VALUES = {
                            table["Name"] == obj.Name,
                        }
                    })
            };
            this.InsertCommandsExtension(obj, list);
            return list;
        }
        partial void InsertCommandsExtension(Definitif.Test.User obj, List<IDbCommand> list);

        protected sealed override List<IDbCommand> UpdateCommands(Definitif.Test.User obj) {
            List<IDbCommand> list = new List<IDbCommand> {
                this.database.GetCommand(
                    new Insert() {
                        VALUES = {
                            table["Version"] == obj.Version + 1,
                            table["Name"] == obj.Name,
                        },
                        WHERE = {
                            table["Id"] == obj.Id.Value,
                            table["Version"] == obj.Version,
                        }
                    })
            };
            this.UpdateCommandsExtension(obj, list);
            return list;
        }
        partial void UpdateCommandsExtension(Definitif.Test.User obj, List<IDbCommand> list);

        protected sealed override List<IDbCommand> DeleteCommands(Definitif.Test.User obj) {
            List<IDbCommand> list = new List<IDbCommand> {
                this.database.GetCommand(
                    new Delete(table) {
                        WHERE = {
                            table["Id"] == obj.Id.Value, 
                            table["Version"] == obj.Version,
                        }
                    })
            };
            this.DeleteCommandsExtension(obj, list);
            return list;
        }
        partial void DeleteCommandsExtension(Definitif.Test.User obj, List<IDbCommand> list);

    }
    public partial class Achievement : Mapper<Definitif.Test.Achievement> {

        public Achievement()
        {
            this.database = Core.Database;
            this.table = this.database["Achievements"];
        }

        public sealed override Definitif.Test.Achievement ReadObject(IDataReader reader)
        {
            Definitif.Test.Achievement result = new Definitif.Test.Achievement()
            {
                Name = (string)reader["Name"],
            };
            FillBase(result, reader);
            return result;
        }
        public sealed override Definitif.Test.Achievement ReadObject(IDataReader reader, string fieldPrefix)
        {
            Definitif.Test.Achievement result = new Definitif.Test.Achievement()
            {
                Name = (string)reader[fieldPrefix + "Name"],
            };
            FillBase(result, reader, fieldPrefix);
            return result;
        }

        protected sealed override List<IDbCommand> InsertCommands(Definitif.Test.Achievement obj) {
            List<IDbCommand> list = new List<IDbCommand> {
                this.database.GetCommand(
                    new Insert() {
                        VALUES = {
                            table["Name"] == obj.Name,
                        }
                    })
            };
            this.InsertCommandsExtension(obj, list);
            return list;
        }
        partial void InsertCommandsExtension(Definitif.Test.Achievement obj, List<IDbCommand> list);

        protected sealed override List<IDbCommand> UpdateCommands(Definitif.Test.Achievement obj) {
            List<IDbCommand> list = new List<IDbCommand> {
                this.database.GetCommand(
                    new Insert() {
                        VALUES = {
                            table["Version"] == obj.Version + 1,
                            table["Name"] == obj.Name,
                        },
                        WHERE = {
                            table["Id"] == obj.Id.Value,
                            table["Version"] == obj.Version,
                        }
                    })
            };
            this.UpdateCommandsExtension(obj, list);
            return list;
        }
        partial void UpdateCommandsExtension(Definitif.Test.Achievement obj, List<IDbCommand> list);

        protected sealed override List<IDbCommand> DeleteCommands(Definitif.Test.Achievement obj) {
            List<IDbCommand> list = new List<IDbCommand> {
                this.database.GetCommand(
                    new Delete(table) {
                        WHERE = {
                            table["Id"] == obj.Id.Value, 
                            table["Version"] == obj.Version,
                        }
                    })
            };
            this.DeleteCommandsExtension(obj, list);
            return list;
        }
        partial void DeleteCommandsExtension(Definitif.Test.Achievement obj, List<IDbCommand> list);

    }
    public partial class UserAchievement : Mapper<Definitif.Test.UserAchievement>, IManyToManyMapper {

        public UserAchievement()
        {
            this.database = Core.Database;
            this.table = this.database["UserAchievements"];
        }

        public sealed override Definitif.Test.UserAchievement ReadObject(IDataReader reader)
        {
            Definitif.Test.UserAchievement result = new Definitif.Test.UserAchievement()
            {
                UserId = (reader["UserId"] == DBNull.Value) ? Id.Empty : new Id(reader["UserId"]),
                AchievementId = (reader["AchievementId"] == DBNull.Value) ? Id.Empty : new Id(reader["AchievementId"]),
                Received = (DateTime)reader["Received"],
            };
            FillBase(result, reader);
            return result;
        }
        public sealed override Definitif.Test.UserAchievement ReadObject(IDataReader reader, string fieldPrefix)
        {
            Definitif.Test.UserAchievement result = new Definitif.Test.UserAchievement()
            {
                UserId = (reader[fieldPrefix + "UserId"] == DBNull.Value) ? Id.Empty : new Id(reader[fieldPrefix + "UserId"]),
                AchievementId = (reader[fieldPrefix + "AchievementId"] == DBNull.Value) ? Id.Empty : new Id(reader[fieldPrefix + "AchievementId"]),
                Received = (DateTime)reader[fieldPrefix + "Received"],
            };
            FillBase(result, reader, fieldPrefix);
            return result;
        }

        protected sealed override List<IDbCommand> InsertCommands(Definitif.Test.UserAchievement obj) {
            List<IDbCommand> list = new List<IDbCommand> {
                this.database.GetCommand(
                    new Insert() {
                        VALUES = {
                            table["UserId"] == (obj.UserId == Id.Empty) ? DBNull.Value : obj.User,
                            table["AchievementId"] == (obj.AchievementId == Id.Empty) ? DBNull.Value : obj.Achievement,
                            table["Received"] == obj.Received,
                        }
                    })
            };
            this.InsertCommandsExtension(obj, list);
            return list;
        }
        partial void InsertCommandsExtension(Definitif.Test.UserAchievement obj, List<IDbCommand> list);

        protected sealed override List<IDbCommand> UpdateCommands(Definitif.Test.UserAchievement obj) {
            List<IDbCommand> list = new List<IDbCommand> {
                this.database.GetCommand(
                    new Insert() {
                        VALUES = {
                            table["Version"] == obj.Version + 1,
                            table["UserId"] == (obj.UserId == Id.Empty) ? DBNull.Value : obj.User,
                            table["AchievementId"] == (obj.AchievementId == Id.Empty) ? DBNull.Value : obj.Achievement,
                            table["Received"] == obj.Received,
                        },
                        WHERE = {
                            table["Id"] == obj.Id.Value,
                            table["Version"] == obj.Version,
                        }
                    })
            };
            this.UpdateCommandsExtension(obj, list);
            return list;
        }
        partial void UpdateCommandsExtension(Definitif.Test.UserAchievement obj, List<IDbCommand> list);

        protected sealed override List<IDbCommand> DeleteCommands(Definitif.Test.UserAchievement obj) {
            List<IDbCommand> list = new List<IDbCommand> {
                this.database.GetCommand(
                    new Delete(table) {
                        WHERE = {
                            table["Id"] == obj.Id.Value, 
                            table["Version"] == obj.Version,
                        }
                    })
            };
            this.DeleteCommandsExtension(obj, list);
            return list;
        }
        partial void DeleteCommandsExtension(Definitif.Test.UserAchievement obj, List<IDbCommand> list);

        public string FieldNameJoin(IModel model) {
            if (model is System.CodeDom.CodeNamespace.User) {
                return "UserId";
            }
            else if (model is System.CodeDom.CodeNamespace.Achievement) {
                return "AchievementId";
            }
            else throw new ArgumentException();
        }

        public string FieldNameWhere(IModel model) {
            if (model is System.CodeDom.CodeNamespace.User) {
                return "AchievementId";
            }
            else if (model is System.CodeDom.CodeNamespace.Achievement) {
                return "UserId";
            }
            else throw new ArgumentException();
        }

    }
}
