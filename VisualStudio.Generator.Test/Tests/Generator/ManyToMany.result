//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30128.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Definitif;
using Definitif.Data;
using Definitif.Data.Queries;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;


namespace Definitif.Test {
    
    public partial class User : Model<Definitif.Test.Mappers.User> {

        /// <summary>
        /// Gets User instance from database by given Id.
        /// </summary>
        public static User Get(Id id) {
            return User.Mapper.Read(id);
        }

        public class UserTableScheme : ModelTableScheme<Definitif.Test.Mappers.User> {
            public UserTableScheme() {
                
            }

            private Column p_name = table["Name"];
            public Column Name { get { return p_name; } }
        }

        private static UserTableScheme tableScheme = new UserTableScheme();
        /// <summary>
        /// Gets User model table scheme.
        /// </summary>
        public new UserTableScheme C {
            get {
                return tableScheme;
            }
        }

        public string Name {
            get { return p_name; }
            set { p_name = value; }
        }
        protected string p_name;

    }
    public partial class Achievement : Model<Definitif.Test.Mappers.Achievement> {

        /// <summary>
        /// Gets Achievement instance from database by given Id.
        /// </summary>
        public static Achievement Get(Id id) {
            return Achievement.Mapper.Read(id);
        }

        public class AchievementTableScheme : ModelTableScheme<Definitif.Test.Mappers.Achievement> {
            public AchievementTableScheme() {
                
            }

            private Column p_name = table["Name"];
            public Column Name { get { return p_name; } }
        }

        private static AchievementTableScheme tableScheme = new AchievementTableScheme();
        /// <summary>
        /// Gets Achievement model table scheme.
        /// </summary>
        public new AchievementTableScheme C {
            get {
                return tableScheme;
            }
        }

        public string Name {
            get { return p_name; }
            set { p_name = value; }
        }
        protected string p_name;

    }
    public partial class UserAchievement : Model<Definitif.Test.Mappers.UserAchievement>, IManyToMany {

        /// <summary>
        /// Gets UserAchievement instance from database by given Id.
        /// </summary>
        public static UserAchievement Get(Id id) {
            return UserAchievement.Mapper.Read(id);
        }

        public class UserAchievementTableScheme : ModelTableScheme<Definitif.Test.Mappers.UserAchievement> {
            public UserAchievementTableScheme() {
                if (!p_user.Id.ForeignKeys.ContainsKey(table["UserId"])) p_user.Id.ForeignKeys.Add(table["UserId"]);
                if (!p_achievement.Id.ForeignKeys.ContainsKey(table["AchievementId"])) p_achievement.Id.ForeignKeys.Add(table["AchievementId"]);
            }

            private UserTableScheme p_user = new User().C;
            public UserTableScheme User { get { return p_user; } }
            private AchievementTableScheme p_achievement = new Achievement().C;
            public AchievementTableScheme Achievement { get { return p_achievement; } }
            private Column p_received = table["Received"];
            public Column Received { get { return p_received; } }
        }

        private static UserAchievementTableScheme tableScheme = new UserAchievementTableScheme();
        /// <summary>
        /// Gets UserAchievement model table scheme.
        /// </summary>
        public new UserAchievementTableScheme C {
            get {
                return tableScheme;
            }
        }

        protected Id UserId {
            get { return id_user; }
            set { id_user = value; }
        }
        protected Id id_user = Id.Empty;

        public User User {
            get {
                if (p_user == null && id_user != Id.Empty) {
                    p_user = User.Get(id_user);
                }
                return p_user;
            }
            set {
                p_user = value;
                id_user = value.Id;
            }
        }
        protected User p_user = null;

        protected Id AchievementId {
            get { return id_achievement; }
            set { id_achievement = value; }
        }
        protected Id id_achievement = Id.Empty;

        public Achievement Achievement {
            get {
                if (p_achievement == null && id_achievement != Id.Empty) {
                    p_achievement = Achievement.Get(id_achievement);
                }
                return p_achievement;
            }
            set {
                p_achievement = value;
                id_achievement = value.Id;
            }
        }
        protected Achievement p_achievement = null;

        public DateTime Received {
            get { return p_received; }
            set { p_received = value; }
        }
        protected DateTime p_received;

    }
    public partial class User {

        /// <summary>
        /// Gets linked Achievement objects.
        /// </summary>
        public List<ManyToMany<UserAchievement, Achievement>> GetAchievements() {
            return ManyToMany<UserAchievement, Achievement>.Mapper.Read(this.id);
        }

    }
    public partial class Achievement {

        /// <summary>
        /// Gets linked User objects.
        /// </summary>
        public List<ManyToMany<UserAchievement, User>> GetUsers() {
            return ManyToMany<UserAchievement, User>.Mapper.Read(this.id);
        }

    }
}
namespace Definitif.Test.Mappers {
    
    public partial class User : Mapper<Definitif.Test.User> {

        public User()
        {
            this.database = Core.Database;
            this.table = this.database["Users"];
        }

        public sealed override Definitif.Test.User ReadObject(IDataReader reader)
        {
            Definitif.Test.User result = new Definitif.Test.User()
            {
                Name = (string)reader["Name"],
            };
            FillBase(result, reader);
            return result;
        }
        public sealed override Definitif.Test.User ReadObject(IDataReader reader, string fieldPrefix)
        {
            Definitif.Test.User result = new Definitif.Test.User()
            {
                Name = (string)reader[fieldPrefix + "Name"],
            };
            FillBase(result, reader, fieldPrefix);
            return result;
        }

        protected sealed override List<DbCommand> InsertCommands(Definitif.Test.User obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Insert<Definitif.Test.User>()
                        .Values(m =>
                            m.C.Name == obj.Name))
            };
            this.InsertCommandsExtension(obj, list);
            return list;
        }
        partial void InsertCommandsExtension(Definitif.Test.User obj, List<DbCommand> list);

        protected sealed override List<DbCommand> UpdateCommands(Definitif.Test.User obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Update<Definitif.Test.User>()
                        .Values(m =>
                            m.C.Version == obj.Version + 1 &
                            m.C.Name == obj.Name)
                        .Where(m =>
                            m.C.Id == obj.Id.Value &
                            m.C.Version == obj.Version))
            };
            this.UpdateCommandsExtension(obj, list);
            return list;
        }
        partial void UpdateCommandsExtension(Definitif.Test.User obj, List<DbCommand> list);

        protected sealed override List<DbCommand> DeleteCommands(Definitif.Test.User obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Delete<Definitif.Test.User>()
                        .Where(m =>
                            m.C.Id == obj.Id.Value &
                            m.C.Version == obj.Version))
            };
            this.DeleteCommandsExtension(obj, list);
            return list;
        }
        partial void DeleteCommandsExtension(Definitif.Test.User obj, List<DbCommand> list);

    }
    public partial class Achievement : Mapper<Definitif.Test.Achievement> {

        public Achievement()
        {
            this.database = Core.Database;
            this.table = this.database["Achievements"];
        }

        public sealed override Definitif.Test.Achievement ReadObject(IDataReader reader)
        {
            Definitif.Test.Achievement result = new Definitif.Test.Achievement()
            {
                Name = (string)reader["Name"],
            };
            FillBase(result, reader);
            return result;
        }
        public sealed override Definitif.Test.Achievement ReadObject(IDataReader reader, string fieldPrefix)
        {
            Definitif.Test.Achievement result = new Definitif.Test.Achievement()
            {
                Name = (string)reader[fieldPrefix + "Name"],
            };
            FillBase(result, reader, fieldPrefix);
            return result;
        }

        protected sealed override List<DbCommand> InsertCommands(Definitif.Test.Achievement obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Insert<Definitif.Test.Achievement>()
                        .Values(m =>
                            m.C.Name == obj.Name))
            };
            this.InsertCommandsExtension(obj, list);
            return list;
        }
        partial void InsertCommandsExtension(Definitif.Test.Achievement obj, List<DbCommand> list);

        protected sealed override List<DbCommand> UpdateCommands(Definitif.Test.Achievement obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Update<Definitif.Test.Achievement>()
                        .Values(m =>
                            m.C.Version == obj.Version + 1 &
                            m.C.Name == obj.Name)
                        .Where(m =>
                            m.C.Id == obj.Id.Value &
                            m.C.Version == obj.Version))
            };
            this.UpdateCommandsExtension(obj, list);
            return list;
        }
        partial void UpdateCommandsExtension(Definitif.Test.Achievement obj, List<DbCommand> list);

        protected sealed override List<DbCommand> DeleteCommands(Definitif.Test.Achievement obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Delete<Definitif.Test.Achievement>()
                        .Where(m =>
                            m.C.Id == obj.Id.Value &
                            m.C.Version == obj.Version))
            };
            this.DeleteCommandsExtension(obj, list);
            return list;
        }
        partial void DeleteCommandsExtension(Definitif.Test.Achievement obj, List<DbCommand> list);

    }
    public partial class UserAchievement : Mapper<Definitif.Test.UserAchievement>, IManyToManyMapper {

        public UserAchievement()
        {
            this.database = Core.Database;
            this.table = this.database["UserAchievements"];
        }

        public sealed override Definitif.Test.UserAchievement ReadObject(IDataReader reader)
        {
            Definitif.Test.UserAchievement result = new Definitif.Test.UserAchievement()
            {
                UserId = (reader["UserId"] == DBNull.Value) ? Id.Empty : new Id(reader["UserId"]),
                AchievementId = (reader["AchievementId"] == DBNull.Value) ? Id.Empty : new Id(reader["AchievementId"]),
                Received = (DateTime)reader["Received"],
            };
            FillBase(result, reader);
            return result;
        }
        public sealed override Definitif.Test.UserAchievement ReadObject(IDataReader reader, string fieldPrefix)
        {
            Definitif.Test.UserAchievement result = new Definitif.Test.UserAchievement()
            {
                UserId = (reader[fieldPrefix + "UserId"] == DBNull.Value) ? Id.Empty : new Id(reader[fieldPrefix + "UserId"]),
                AchievementId = (reader[fieldPrefix + "AchievementId"] == DBNull.Value) ? Id.Empty : new Id(reader[fieldPrefix + "AchievementId"]),
                Received = (DateTime)reader[fieldPrefix + "Received"],
            };
            FillBase(result, reader, fieldPrefix);
            return result;
        }

        protected sealed override List<DbCommand> InsertCommands(Definitif.Test.UserAchievement obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Insert<Definitif.Test.UserAchievement>()
                        .Values(m =>
                            m.C.User.Id == (obj.UserId == Id.Empty) ? DBNull.Value : obj.User &
                            m.C.Achievement.Id == (obj.AchievementId == Id.Empty) ? DBNull.Value : obj.Achievement &
                            m.C.Received == obj.Received))
            };
            this.InsertCommandsExtension(obj, list);
            return list;
        }
        partial void InsertCommandsExtension(Definitif.Test.UserAchievement obj, List<DbCommand> list);

        protected sealed override List<DbCommand> UpdateCommands(Definitif.Test.UserAchievement obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Update<Definitif.Test.UserAchievement>()
                        .Values(m =>
                            m.C.Version == obj.Version + 1 &
                            m.C.User.Id == (obj.UserId == Id.Empty) ? DBNull.Value : obj.User &
                            m.C.Achievement.Id == (obj.AchievementId == Id.Empty) ? DBNull.Value : obj.Achievement &
                            m.C.Received == obj.Received)
                        .Where(m =>
                            m.C.Id == obj.Id.Value &
                            m.C.Version == obj.Version))
            };
            this.UpdateCommandsExtension(obj, list);
            return list;
        }
        partial void UpdateCommandsExtension(Definitif.Test.UserAchievement obj, List<DbCommand> list);

        protected sealed override List<DbCommand> DeleteCommands(Definitif.Test.UserAchievement obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Delete<Definitif.Test.UserAchievement>()
                        .Where(m =>
                            m.C.Id == obj.Id.Value &
                            m.C.Version == obj.Version))
            };
            this.DeleteCommandsExtension(obj, list);
            return list;
        }
        partial void DeleteCommandsExtension(Definitif.Test.UserAchievement obj, List<DbCommand> list);

        public string FieldNameJoin(IModel model) {
            if (model is System.CodeDom.CodeNamespace.User) {
                return "UserId";
            }
            else if (model is System.CodeDom.CodeNamespace.Achievement) {
                return "AchievementId";
            }
            else throw new ArgumentException();
        }

        public string FieldNameWhere(IModel model) {
            if (model is System.CodeDom.CodeNamespace.User) {
                return "AchievementId";
            }
            else if (model is System.CodeDom.CodeNamespace.Achievement) {
                return "UserId";
            }
            else throw new ArgumentException();
        }

    }
}
