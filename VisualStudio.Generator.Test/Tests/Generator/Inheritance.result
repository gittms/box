//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Definitif;
using Definitif.Data;
using Definitif.Data.Queries;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Runtime.Serialization;


namespace Definitif.Test {
    
    public partial class SuperUser : Model<Definitif.Test.Mappers.SuperUser> {

        /// <summary>
        /// Gets SuperUser instance from database by given Id.
        /// </summary>
        public static SuperUser Get(Id id) {
            return SuperUser.Mapper.Read(id);
        }

        public class SuperUserTableScheme : ModelTableScheme<Definitif.Test.Mappers.SuperUser> {
            public SuperUserTableScheme() {
                
            }

            private Column p_firstname = table["FirstName"];
            public Column FirstName { get { return p_firstname; } }
            private Column p_lastname = table["LastName"];
            public Column LastName { get { return p_lastname; } }
            private Column p_name = table["Name"];
            public Column Name { get { return p_name; } }
        }

        private static SuperUserTableScheme tableScheme = new SuperUserTableScheme();
        /// <summary>
        /// Gets SuperUser model table scheme.
        /// </summary>
        public new SuperUserTableScheme C {
            get {
                return tableScheme;
            }
        }

        [DataMember(Name = "FirstName", IsRequired = false)]
        public string FirstName {
            get { return p_firstname; }
            set { p_firstname = value; }
        }
        protected string p_firstname;

        [DataMember(Name = "LastName", IsRequired = false)]
        public string LastName {
            get { return p_lastname; }
            set { p_lastname = value; }
        }
        protected string p_lastname;

        [DataMember(Name = "Name", IsRequired = false)]
        public string Name {
            get { return p_name; }
            set { p_name = value; }
        }
        protected string p_name;

    }
}
namespace Definitif.Test.Mappers {
    
    public partial class SuperUser : Mapper<Definitif.Test.SuperUser> {

        public SuperUser()
        {
            this.database = global::Core.Database;
            this.table = this.database["SuperUsers"];
        }

        public sealed override Definitif.Test.SuperUser ReadObject(IDataReader reader)
        {
            Definitif.Test.SuperUser result = new Definitif.Test.SuperUser()
            {
                FirstName = reader["FirstName"] as string,
                LastName = reader["LastName"] as string,
                Name = reader["Name"] as string,
            };
            FillBase(result, reader);
            return result;
        }
        public sealed override Definitif.Test.SuperUser ReadObject(IDataReader reader, string fieldPrefix)
        {
            Definitif.Test.SuperUser result = new Definitif.Test.SuperUser()
            {
                FirstName = reader[fieldPrefix + "FirstName"] as string,
                LastName = reader[fieldPrefix + "LastName"] as string,
                Name = reader[fieldPrefix + "Name"] as string,
            };
            FillBase(result, reader, fieldPrefix);
            return result;
        }

        protected sealed override List<DbCommand> InsertCommands(Definitif.Test.SuperUser obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Insert<Definitif.Test.SuperUser>()
                        .Values(m =>
                            m.C.FirstName == obj.FirstName &
                            m.C.LastName == obj.LastName &
                            m.C.Name == obj.Name))
            };
            this.InsertCommandsExtension(obj, list);
            return list;
        }
        partial void InsertCommandsExtension(Definitif.Test.SuperUser obj, List<DbCommand> list);

        protected sealed override List<DbCommand> UpdateCommands(Definitif.Test.SuperUser obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Update<Definitif.Test.SuperUser>()
                        .Set(m =>
                            m.C.Version == obj.Version + 1 &
                            m.C.FirstName == obj.FirstName &
                            m.C.LastName == obj.LastName &
                            m.C.Name == obj.Name)
                        .Where(m =>
                            m.C.Id == obj.Id.Value &
                            m.C.Version == obj.Version))
            };
            this.UpdateCommandsExtension(obj, list);
            return list;
        }
        partial void UpdateCommandsExtension(Definitif.Test.SuperUser obj, List<DbCommand> list);

        protected sealed override List<DbCommand> DeleteCommands(Definitif.Test.SuperUser obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Delete<Definitif.Test.SuperUser>()
                        .Where(m =>
                            m.C.Id == obj.Id.Value &
                            m.C.Version == obj.Version))
            };
            this.DeleteCommandsExtension(obj, list);
            return list;
        }
        partial void DeleteCommandsExtension(Definitif.Test.SuperUser obj, List<DbCommand> list);

        public static Definitif.Data.Table CreateTableObject() {
            return Definitif.Data.Table.Default("SuperUsers",
                new Column("FirstName", "varchar(255)"),
                new Column("LastName", "varchar(255)"),
                new Column("Name", "varchar(255)")
            );
        }

    }
}
