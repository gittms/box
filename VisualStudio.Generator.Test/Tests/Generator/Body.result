//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30128.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Definitif;
using Definitif.Data;
using Definitif.Data.ObjectSql;
using Definitif.Data.ObjectSql.Query;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;


namespace TestNamespace {
    
    public partial class TestModel : Model<TestNamespace.Mappers.TestModel> {

        /// <summary>
        /// Gets TestModel instance from database by given Id.
        /// </summary>
        public static TestModel Get(Id id) {
            return TestModel.Mapper.Read(id);
        }

        private string Name {
            get { return p_name; }
            set { p_name = value; }
        }
        protected string p_name;

        private int ItemsCount {
            get { return p_itemscount; }
            set { p_itemscount = value; }
        }
        protected int p_itemscount;

        protected int protectedInt = 100;

        public static bool StaticProperty {
            get { return true; }
        }

    }
}
namespace TestNamespace.Mappers {
    
    public partial class TestModel : Mapper<TestNamespace.TestModel> {

        public TestModel()
        {
            this.database = App.Database;
            this.table = this.database["Models"];
        }

        public sealed override TestNamespace.TestModel ReadObject(IDataReader reader)
        {
            TestNamespace.TestModel result = new TestNamespace.TestModel()
            {
                Name = (string)reader["Name"],
                ItemsCount = (int)reader["ItemsCount"],
            };
            FillBase(result, reader);
            return result;
        }
        public sealed override TestNamespace.TestModel ReadObject(IDataReader reader, string fieldPrefix)
        {
            TestNamespace.TestModel result = new TestNamespace.TestModel()
            {
                Name = (string)reader[fieldPrefix + "Name"],
                ItemsCount = (int)reader[fieldPrefix + "ItemsCount"],
            };
            FillBase(result, reader, fieldPrefix);
            return result;
        }

        protected sealed override List<DbCommand> InsertCommands(TestNamespace.TestModel obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Insert() {
                        VALUES = {
                            table["Name"] == obj.Name,
                            table["ItemsCount"] == obj.ItemsCount,
                        }
                    })
            };
            this.InsertCommandsExtension(obj, list);
            return list;
        }
        partial void InsertCommandsExtension(TestNamespace.TestModel obj, List<DbCommand> list);

        protected sealed override List<DbCommand> UpdateCommands(TestNamespace.TestModel obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Update() {
                        VALUES = {
                            table["Version"] == obj.Version + 1,
                            table["Name"] == obj.Name,
                            table["ItemsCount"] == obj.ItemsCount,
                        },
                        WHERE = {
                            table["Id"] == obj.Id.Value,
                            table["Version"] == obj.Version,
                        }
                    })
            };
            this.UpdateCommandsExtension(obj, list);
            return list;
        }
        partial void UpdateCommandsExtension(TestNamespace.TestModel obj, List<DbCommand> list);

        protected sealed override List<DbCommand> DeleteCommands(TestNamespace.TestModel obj) {
            List<DbCommand> list = new List<DbCommand> {
                this.database.GetCommand(
                    new Delete(table) {
                        WHERE = {
                            table["Id"] == obj.Id.Value, 
                            table["Version"] == obj.Version,
                        }
                    })
            };
            this.DeleteCommandsExtension(obj, list);
            return list;
        }
        partial void DeleteCommandsExtension(TestNamespace.TestModel obj, List<DbCommand> list);

    }
}
